package blockdag

import (
	"github.com/iotaledger/hive.go/core/generics/event"
)

// Events is a collection of Tangle related Events
type Events struct {
	// BlockAttached is triggered when a previously unknown Block is attached.
	BlockAttached *event.LinkableCollectionEvent[*Block, Events, *Events]

	// BlockSolid is triggered when a Block becomes solid (its entire past cone is known and solid).
	BlockSolid *event.LinkableCollectionEvent[*Block, Events, *Events]

	// BlockMissing is triggered when a referenced Block was not attached, yet.
	BlockMissing *event.LinkableCollectionEvent[*Block, Events, *Events]

	// MissingBlockAttached is triggered when a previously missing Block was attached.
	MissingBlockAttached *event.LinkableCollectionEvent[*Block, Events, *Events]

	// BlockInvalid is triggered when a Block is found to be invalid.
	BlockInvalid *event.LinkableCollectionEvent[*Block, Events, *Events]

	// BlockOrphaned is triggered when a Block becomes orphaned.
	BlockOrphaned *event.LinkableCollectionEvent[*Block, Events, *Events]

	// BlockUnorphaned is triggered when a Block is no longer orphaned.
	BlockUnorphaned *event.LinkableCollectionEvent[*Block, Events, *Events]

	event.LinkableCollection[Events, *Events]
}

// NewEvents contains the constructor of the Events object (it is generated by a generic factory).
var NewEvents = event.LinkableCollectionConstructor[Events](func(e *Events) {
	e.BlockAttached = event.NewLinkableCollectionEvent[*Block](e, func(target *Events) {
		e.BlockAttached.LinkTo(target.BlockAttached)
	})
	e.BlockSolid = event.NewLinkableCollectionEvent[*Block](e, func(target *Events) {
		e.BlockSolid.LinkTo(target.BlockSolid)
	})
	e.BlockMissing = event.NewLinkableCollectionEvent[*Block](e, func(target *Events) {
		e.BlockMissing.LinkTo(target.BlockMissing)
	})
	e.MissingBlockAttached = event.NewLinkableCollectionEvent[*Block](e, func(target *Events) {
		e.MissingBlockAttached.LinkTo(target.MissingBlockAttached)
	})
	e.BlockInvalid = event.NewLinkableCollectionEvent[*Block](e, func(target *Events) {
		e.BlockInvalid.LinkTo(target.BlockInvalid)
	})
	e.BlockOrphaned = event.NewLinkableCollectionEvent[*Block](e, func(target *Events) {
		e.BlockOrphaned.LinkTo(target.BlockOrphaned)
	})
	e.BlockUnorphaned = event.NewLinkableCollectionEvent[*Block](e, func(target *Events) {
		e.BlockUnorphaned.LinkTo(target.BlockUnorphaned)
	})
})

package blockdag

import (
	"github.com/iotaledger/hive.go/core/generics/event"
)

// Events is a collection of Tangle related Events
type Events struct {
	// BlockAttached is triggered when a previously unknown Block is attached.
	BlockAttached *event.Linkable[*Block, Events, *Events]

	// BlockSolid is triggered when a Block becomes solid (its entire past cone is known and solid).
	BlockSolid *event.Linkable[*Block, Events, *Events]

	// BlockMissing is triggered when a referenced Block was not attached, yet.
	BlockMissing *event.Linkable[*Block, Events, *Events]

	// MissingBlockAttached is triggered when a previously missing Block was attached.
	MissingBlockAttached *event.Linkable[*Block, Events, *Events]

	// BlockInvalid is triggered when a Block is found to be invalid.
	BlockInvalid *event.Linkable[*Block, Events, *Events]

	// BlockOrphaned is triggered when a Block becomes orphaned.
	BlockOrphaned *event.Linkable[*Block, Events, *Events]

	// BlockUnorphaned is triggered when a Block is no longer orphaned.
	BlockUnorphaned *event.Linkable[*Block, Events, *Events]

	event.LinkableCollection[Events, *Events]
}

// NewEvents contains the constructor of the Events object (it is generated by a generic factory).
var NewEvents = event.NewLinkableEvents(func(self *Events) (linker func(*Events)) {
	self.BlockAttached = event.NewLinkable[*Block, Events]()
	self.BlockSolid = event.NewLinkable[*Block, Events]()
	self.BlockMissing = event.NewLinkable[*Block, Events]()
	self.MissingBlockAttached = event.NewLinkable[*Block, Events]()
	self.BlockInvalid = event.NewLinkable[*Block, Events]()
	self.BlockOrphaned = event.NewLinkable[*Block, Events]()
	self.BlockUnorphaned = event.NewLinkable[*Block, Events]()

	return func(newTarget *Events) {
		self.BlockAttached.LinkTo(newTarget.BlockAttached)
		self.BlockSolid.LinkTo(newTarget.BlockSolid)
		self.BlockMissing.LinkTo(newTarget.BlockMissing)
		self.MissingBlockAttached.LinkTo(newTarget.MissingBlockAttached)
		self.BlockInvalid.LinkTo(newTarget.BlockInvalid)
		self.BlockOrphaned.LinkTo(newTarget.BlockOrphaned)
		self.BlockUnorphaned.LinkTo(newTarget.BlockUnorphaned)
	}
})

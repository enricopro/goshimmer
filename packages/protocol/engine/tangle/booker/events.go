package booker

import (
	"github.com/iotaledger/hive.go/core/generics/event"

	"github.com/iotaledger/goshimmer/packages/protocol/engine/tangle/booker/markermanager"
	"github.com/iotaledger/goshimmer/packages/protocol/engine/tangle/booker/markers"
	"github.com/iotaledger/goshimmer/packages/protocol/ledger/utxo"
)

type Events struct {
	BlockBooked         *event.Linkable[*Block, Events, *Events]
	BlockConflictAdded  *event.Linkable[*BlockConflictAddedEvent, Events, *Events]
	MarkerConflictAdded *event.Linkable[*MarkerConflictAddedEvent, Events, *Events]
	SequenceEvicted     *event.Linkable[markers.SequenceID, Events, *Events]
	Error               *event.Linkable[error, Events, *Events]

	MarkerManager *markermanager.Events

	event.LinkableCollection[Events, *Events]
}

// NewEvents contains the constructor of the Events object (it is generated by a generic factory).
var NewEvents = event.NewLinkableEvents(func(self *Events) (linker func(*Events)) {
	self.BlockBooked = event.NewLinkable[*Block, Events]()
	self.BlockConflictAdded = event.NewLinkable[*BlockConflictAddedEvent, Events]()
	self.MarkerConflictAdded = event.NewLinkable[*MarkerConflictAddedEvent, Events]()
	self.SequenceEvicted = event.NewLinkable[markers.SequenceID, Events]()
	self.Error = event.NewLinkable[error, Events]()

	self.MarkerManager = markermanager.NewEvents()

	return func(newTarget *Events) {
		self.BlockBooked.LinkTo(newTarget.BlockBooked)
		self.BlockConflictAdded.LinkTo(newTarget.BlockConflictAdded)
		self.MarkerConflictAdded.LinkTo(newTarget.MarkerConflictAdded)
		self.SequenceEvicted.LinkTo(newTarget.SequenceEvicted)
		self.Error.LinkTo(newTarget.Error)

		self.MarkerManager.LinkTo(newTarget.MarkerManager)
	}
})

type BlockConflictAddedEvent struct {
	Block             *Block
	ConflictID        utxo.TransactionID
	ParentConflictIDs utxo.TransactionIDs
}

type MarkerConflictAddedEvent struct {
	Marker            markers.Marker
	ConflictID        utxo.TransactionID
	ParentConflictIDs utxo.TransactionIDs
}

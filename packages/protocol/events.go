package protocol

import (
	"github.com/iotaledger/hive.go/core/generics/event"

	"github.com/iotaledger/goshimmer/packages/protocol/engine"
)

type Events struct {
	SwitchedEngine *event.LinkableCollectionEvent[*engine.Engine, Events, *Events]

	Engine *engine.Events

	event.LinkableCollection[Events, *Events]
}

// NewEvents contains the constructor of the Events object (it is generated by a generic factory).
var NewEvents = event.LinkableCollectionConstructor[Events](func(e *Events) {
	e.SwitchedEngine = event.NewLinkableCollectionEvent[*engine.Engine](e, func(target *Events) {
		e.SwitchedEngine.LinkTo(target.SwitchedEngine)
	})

	e.Engine = engine.NewEvents()

	e.OnLinkUpdated(func(linkTarget *Events) {
		e.Engine.LinkTo(linkTarget.Engine)
	})
})

package engine

import (
	"github.com/iotaledger/hive.go/core/generics/event"

	"github.com/iotaledger/goshimmer/packages/protocol/instance/engine/clock"
	"github.com/iotaledger/goshimmer/packages/protocol/instance/engine/congestioncontrol"
	"github.com/iotaledger/goshimmer/packages/protocol/instance/engine/consensus"
	"github.com/iotaledger/goshimmer/packages/protocol/instance/engine/tangle"
	"github.com/iotaledger/goshimmer/packages/protocol/instance/engine/tip"
	"github.com/iotaledger/goshimmer/packages/protocol/ledger"
)

type Events struct {
	Clock             *clock.Events
	Tangle            *tangle.Events
	Consensus         *consensus.Events
	CongestionControl *congestioncontrol.Events
	TipManager        *tip.Events
	Ledger            *ledger.Events

	event.LinkableCollection[Events, *Events]
}

// NewEvents contains the constructor of the Events object (it is generated by a generic factory).
var NewEvents = event.LinkableConstructor(func() (newEvents *Events) {
	return &Events{
		Clock:             clock.NewEvents(),
		Tangle:            tangle.NewEvents(),
		Consensus:         consensus.NewEvents(),
		CongestionControl: congestioncontrol.NewEvents(),
		TipManager:        tip.NewEvents(),
		Ledger:            ledger.NewEvents(),
	}
})

package conflictdag

import (
	"github.com/iotaledger/hive.go/core/generics/event"
	"github.com/iotaledger/hive.go/core/generics/set"
)

// region Events ///////////////////////////////////////////////////////////////////////////////////////////////////////

// Events is a container that acts as a dictionary for the events of a ConflictDAG.
type Events[ConflictID, ConflictingResourceID comparable] struct {
	// ConflictCreated is an event that gets triggered whenever a new Conflict is created.
	ConflictCreated *event.Linkable[*ConflictCreatedEvent[ConflictID, ConflictingResourceID], Events[ConflictID, ConflictingResourceID], *Events[ConflictID, ConflictingResourceID]]

	// ConflictConflictsUpdated is an event that gets triggered whenever the ConflictIDs of a Conflict are updated.
	ConflictConflictsUpdated *event.Linkable[*ConflictConflictsUpdatedEvent[ConflictID, ConflictingResourceID], Events[ConflictID, ConflictingResourceID], *Events[ConflictID, ConflictingResourceID]]

	// ConflictParentsUpdated is an event that gets triggered whenever the parent ConflictIDs of a Conflict are updated.
	ConflictParentsUpdated *event.Linkable[*ConflictParentsUpdatedEvent[ConflictID, ConflictingResourceID], Events[ConflictID, ConflictingResourceID], *Events[ConflictID, ConflictingResourceID]]

	// ConflictAccepted is an event that gets triggered whenever a Conflict is confirmed.
	ConflictAccepted *event.Linkable[*ConflictAcceptedEvent[ConflictID], Events[ConflictID, ConflictingResourceID], *Events[ConflictID, ConflictingResourceID]]

	// ConflictRejected is an event that gets triggered whenever a Conflict is rejected.
	ConflictRejected *event.Linkable[*ConflictRejectedEvent[ConflictID], Events[ConflictID, ConflictingResourceID], *Events[ConflictID, ConflictingResourceID]]

	event.LinkableCollection[Events[ConflictID, ConflictingResourceID], *Events[ConflictID, ConflictingResourceID]]
}

// NewEvents contains the constructor of the Events object (it is generated by a generic factory).
func NewEvents[ConflictID, ConflictingResourceID comparable](optsLinkTarget ...*Events[ConflictID, ConflictingResourceID]) (events *Events[ConflictID, ConflictingResourceID]) {
	return event.NewLinkableEvents(func(self *Events[ConflictID, ConflictingResourceID]) (linker func(*Events[ConflictID, ConflictingResourceID])) {
		self.ConflictCreated = event.NewLinkable[*ConflictCreatedEvent[ConflictID, ConflictingResourceID], Events[ConflictID, ConflictingResourceID], *Events[ConflictID, ConflictingResourceID]]()
		self.ConflictConflictsUpdated = event.NewLinkable[*ConflictConflictsUpdatedEvent[ConflictID, ConflictingResourceID], Events[ConflictID, ConflictingResourceID], *Events[ConflictID, ConflictingResourceID]]()
		self.ConflictParentsUpdated = event.NewLinkable[*ConflictParentsUpdatedEvent[ConflictID, ConflictingResourceID], Events[ConflictID, ConflictingResourceID], *Events[ConflictID, ConflictingResourceID]]()
		self.ConflictAccepted = event.NewLinkable[*ConflictAcceptedEvent[ConflictID], Events[ConflictID, ConflictingResourceID], *Events[ConflictID, ConflictingResourceID]]()
		self.ConflictRejected = event.NewLinkable[*ConflictRejectedEvent[ConflictID], Events[ConflictID, ConflictingResourceID], *Events[ConflictID, ConflictingResourceID]]()

		return func(newTarget *Events[ConflictID, ConflictingResourceID]) {
			self.ConflictCreated.LinkTo(newTarget.ConflictCreated)
			self.ConflictConflictsUpdated.LinkTo(newTarget.ConflictConflictsUpdated)
			self.ConflictParentsUpdated.LinkTo(newTarget.ConflictParentsUpdated)
			self.ConflictAccepted.LinkTo(newTarget.ConflictAccepted)
			self.ConflictRejected.LinkTo(newTarget.ConflictRejected)
		}
	})(optsLinkTarget...)
}

// endregion ///////////////////////////////////////////////////////////////////////////////////////////////////////////

// region ConflictCreatedEvent /////////////////////////////////////////////////////////////////////////////////////////

// ConflictCreatedEvent is an event that gets triggered when a new Conflict was created.
type ConflictCreatedEvent[ConflictID, ConflictingResourceID comparable] struct {
	// ID contains the identifier of the newly created Conflict.
	ID ConflictID

	// ParentConflictIDs contains the identifiers of the parents of the newly created Conflict.
	ParentConflictIDs *set.AdvancedSet[ConflictID]

	// ConflictingResourceIDs contains the identifiers of the conflicting resources that this Conflict is associated to.
	ConflictingResourceIDs *set.AdvancedSet[ConflictingResourceID]
}

// endregion ///////////////////////////////////////////////////////////////////////////////////////////////////////////

// region ConflictConflictsUpdatedEvent //////////////////////////////////////////////////////////////////////////////////

// ConflictConflictsUpdatedEvent is a container that acts as a dictionary for the ConflictConflictsUpdated event related
// parameters.
type ConflictConflictsUpdatedEvent[ConflictID, ConflictingResourceID comparable] struct {
	// ConflictID contains the identifier of the updated Conflict.
	ConflictID ConflictID

	// NewConflictIDs contains the set of conflicts that this Conflict was added to.
	NewConflictIDs *set.AdvancedSet[ConflictingResourceID]
}

// endregion ///////////////////////////////////////////////////////////////////////////////////////////////////////////

// region ConflictParentsUpdatedEvent ////////////////////////////////////////////////////////////////////////////////////

// ConflictParentsUpdatedEvent is a container that acts as a dictionary for the ConflictParentsUpdated event related
// parameters.
type ConflictParentsUpdatedEvent[ConflictID, ConflictingResourceID comparable] struct {
	// ConflictID contains the identifier of the updated Conflict.
	ConflictID ConflictID

	// AddedConflict contains the forked parent Conflict that replaces the removed parents.
	AddedConflict ConflictID

	// RemovedConflicts contains the parent ConflictIDs that were replaced by the newly forked Conflict.
	RemovedConflicts *set.AdvancedSet[ConflictID]

	// ParentsConflictIDs contains the updated list of parent ConflictIDs.
	ParentsConflictIDs *set.AdvancedSet[ConflictID]
}

// endregion ///////////////////////////////////////////////////////////////////////////////////////////////////////////

// region ConflictAcceptedEvent /////////////////////////////////////////////////////////////////////////////////////////

// ConflictAcceptedEvent is a container that acts as a dictionary for the ConflictAccepted event related parameters.
type ConflictAcceptedEvent[ConflictID comparable] struct {
	// ID contains the identifier of the confirmed Conflict.
	ID ConflictID
}

// endregion ///////////////////////////////////////////////////////////////////////////////////////////////////////////

// region ConflictRejectedEvent //////////////////////////////////////////////////////////////////////////////////////////

// ConflictRejectedEvent is a container that acts as a dictionary for the ConflictRejected event related parameters.
type ConflictRejectedEvent[ConflictID comparable] struct {
	// ID contains the identifier of the rejected Conflict.
	ID ConflictID
}

// endregion ///////////////////////////////////////////////////////////////////////////////////////////////////////////

package booker

import (
	"github.com/iotaledger/hive.go/core/generics/event"

	"github.com/iotaledger/goshimmer/packages/protocol/chain/engine/tangle/booker/markermanager"
	"github.com/iotaledger/goshimmer/packages/protocol/chain/engine/tangle/booker/markers"
	"github.com/iotaledger/goshimmer/packages/protocol/chain/ledger/utxo"
)

type Events struct {
	BlockBooked         *event.Linkable[*Block, Events, *Events]
	BlockConflictAdded  *event.Linkable[*BlockConflictAddedEvent, Events, *Events]
	MarkerConflictAdded *event.Linkable[*MarkerConflictAddedEvent, Events, *Events]
	SequenceEvicted     *event.Linkable[markers.SequenceID, Events, *Events]
	Error               *event.Linkable[error, Events, *Events]

	MarkerManager *markermanager.Events

	event.LinkableCollection[Events, *Events]
}

// NewEvents contains the constructor of the Events object (it is generated by a generic factory).
var NewEvents = event.LinkableConstructor(func() (newEvents *Events) {
	return &Events{
		BlockBooked:         event.NewLinkable[*Block, Events, *Events](),
		BlockConflictAdded:  event.NewLinkable[*BlockConflictAddedEvent, Events, *Events](),
		MarkerConflictAdded: event.NewLinkable[*MarkerConflictAddedEvent, Events, *Events](),
		SequenceEvicted:     event.NewLinkable[markers.SequenceID, Events, *Events](),
		Error:               event.NewLinkable[error, Events, *Events](),

		MarkerManager: markermanager.NewEvents(),
	}
})

type BlockConflictAddedEvent struct {
	Block             *Block
	ConflictID        utxo.TransactionID
	ParentConflictIDs utxo.TransactionIDs
}

type MarkerConflictAddedEvent struct {
	Marker            markers.Marker
	ConflictID        utxo.TransactionID
	ParentConflictIDs utxo.TransactionIDs
}

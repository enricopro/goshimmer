package gossip

import (
	"github.com/iotaledger/hive.go/core/autopeering/peer"
	"github.com/iotaledger/hive.go/core/generics/event"
)

// Events defines all the events related to the gossip protocol.
type Events struct {
	// Fired when a new block was received via the gossip protocol.
	BlockReceived *event.Linkable[*BlockReceivedEvent, Events, *Events]

	event.LinkableCollection[Events, *Events]
}

// NewEvents contains the constructor of the Events object (it is generated by a generic factory).
var NewEvents = event.LinkableConstructor(func() (newEvents *Events) {
	return &Events{
		BlockReceived: event.NewLinkable[*BlockReceivedEvent, Events, *Events](),
	}
})

// BlockReceivedEvent holds data about a block received event.
type BlockReceivedEvent struct {
	// The raw block.
	Data []byte
	// The sender of the block.
	Peer *peer.Peer
}

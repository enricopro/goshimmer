package requester

import (
	"github.com/iotaledger/hive.go/core/generics/event"

	"github.com/iotaledger/goshimmer/packages/core/epoch"
)

// Events represents events happening on a Requester.
type Events[T epoch.IndexedID] struct {
	// Request is an event that is triggered when the requester wants to request the given entity.
	Request *event.Linkable[T, Events[T], *Events[T]]

	// RequestQueued is an event that is triggered when a new request is started.
	RequestQueued *event.Linkable[T, Events[T], *Events[T]]

	// RequestStopped is an event that is triggered when a request is stopped.
	RequestStopped *event.Linkable[T, Events[T], *Events[T]]

	// RequestFailed is an event that is triggered when a request is stopped after too many attempts.
	RequestFailed *event.Linkable[T, Events[T], *Events[T]]

	event.LinkableCollection[Events[T], *Events[T]]
}

// NewEvents contains the constructor of the Events object (it is generated by a generic factory).
func NewEvents[T epoch.IndexedID](linkedEvents ...*Events[T]) (newEvents *Events[T]) {
	return event.LinkableConstructor(func() *Events[T] {
		return &Events[T]{
			Request:        event.NewLinkable[T, Events[T], *Events[T]](),
			RequestQueued:  event.NewLinkable[T, Events[T], *Events[T]](),
			RequestStopped: event.NewLinkable[T, Events[T], *Events[T]](),
			RequestFailed:  event.NewLinkable[T, Events[T], *Events[T]](),
		}
	})(linkedEvents...)
}
